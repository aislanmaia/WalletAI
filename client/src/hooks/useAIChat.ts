import { useState } from 'react';

export interface ChatMessage {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: Date;
}

export function useAIChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: `Ol√°! Sou seu assistente financeiro. Posso ajudar voc√™ a:

üìä Registrar despesas e receitas
üìà Consultar relat√≥rios e m√©tricas  
üí° Dar insights sobre seus gastos
üéØ Acompanhar suas metas`,
      sender: 'ai',
      timestamp: new Date()
    }
  ]);

  const [isProcessing, setIsProcessing] = useState(false);

  const addMessage = (content: string, sender: 'user' | 'ai') => {
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      content,
      sender,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, newMessage]);
    return newMessage;
  };

  const processUserMessage = (message: string, onTransaction?: (transaction: any) => void) => {
    addMessage(message, 'user');
    setIsProcessing(true);

    // Simulate AI processing
    setTimeout(() => {
      const response = generateAIResponse(message, onTransaction);
      addMessage(response, 'ai');
      setIsProcessing(false);
    }, 1000);
  };

  const generateAIResponse = (userMessage: string, onTransaction?: (transaction: any) => void): string => {
    const message = userMessage.toLowerCase();
    
    // Extract monetary values
    const moneyRegex = /r?\$?\s*(\d+(?:[\.,]\d{2})?)/i;
    const moneyMatch = message.match(moneyRegex);
    const amount = moneyMatch ? parseFloat(moneyMatch[1].replace(',', '.')) : 0;

    if (message.includes('gastei') || message.includes('comprei') || message.includes('paguei')) {
      // Determine category
      let category = 'Outros';
      let icon = 'shopping-bag';
      
      if (message.includes('supermercado') || message.includes('comida') || message.includes('almo√ßo') || message.includes('jantar')) {
        category = 'Alimenta√ß√£o';
        icon = 'shopping-cart';
      } else if (message.includes('combust√≠vel') || message.includes('uber') || message.includes('transporte')) {
        category = 'Transporte';
        icon = 'car';
      } else if (message.includes('farm√°cia') || message.includes('m√©dico') || message.includes('sa√∫de')) {
        category = 'Sa√∫de';
        icon = 'heart';
      }

      if (onTransaction && amount > 0) {
        onTransaction({
          description: extractDescription(message) || category,
          amount: -amount,
          category,
          type: 'expense',
          icon
        });
      }

      return `‚úÖ Despesa registrada com sucesso!

**Detalhes:**
üí∞ Valor: R$ ${amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
üè™ Categoria: ${category}
üìÖ Data: Hoje

Seus gastos em ${category} este m√™s est√£o dentro da meta esperada.`;
    } 
    
    else if (message.includes('recebi') || message.includes('sal√°rio') || message.includes('renda')) {
      if (onTransaction && amount > 0) {
        onTransaction({
          description: extractDescription(message) || 'Receita',
          amount: amount,
          category: 'Trabalho',
          type: 'income',
          icon: 'dollar-sign'
        });
      }

      return `üí∞ Receita registrada! Que √≥tima not√≠cia!

**Detalhes:**
üíµ Valor: R$ ${amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
üìà Sua situa√ß√£o financeira foi atualizada
üìÖ Data: Hoje

Continue assim! Sua meta de economia est√° mais pr√≥xima.`;
    } 
    
    else if (message.includes('quanto') || message.includes('gastos') || message.includes('relat√≥rio')) {
      return `üìä **Resumo dos seus gastos:**

üí≥ Total gasto este m√™s: R$ 5.750,00
üìà Isso representa 70% do seu or√ßamento
üéØ Voc√™ est√° R$ 750,00 abaixo da meta

**Por categoria:**
üçΩÔ∏è Alimenta√ß√£o: R$ 1.250,00 (22%)
üöó Transporte: R$ 800,00 (14%)
üè† Moradia: R$ 2.100,00 (37%)

Quer ver mais detalhes de alguma categoria espec√≠fica?`;
    } 
    
    else if (message.includes('meta') || message.includes('objetivo')) {
      return `üéØ **Suas metas financeiras:**

üí∞ Meta de economia mensal: R$ 2.500,00
üìä Progresso atual: 78% (R$ 1.950,00)
üèÜ Faltam apenas R$ 550,00 para atingir sua meta!

üìà **Dicas para alcan√ßar:**
‚Ä¢ Reduza 10% nos gastos com lazer
‚Ä¢ Considere economizar no transporte
‚Ä¢ Continue no mesmo ritmo de economia

Voc√™ est√° indo muito bem! üöÄ`;
    } 
    
    else {
      return `ü§ñ Entendi! Estou aqui para ajudar voc√™ com:

üí∏ **Registrar transa√ß√µes**: "Gastei R$ 50 no almo√ßo"
üìä **Consultar gastos**: "Quanto gastei este m√™s?"
üéØ **Acompanhar metas**: "Como est√° minha meta?"
üìà **Relat√≥rios**: "Relat√≥rio de gastos por categoria"

O que voc√™ gostaria de fazer agora?`;
    }
  };

  const extractDescription = (message: string): string => {
    // Simple extraction logic - in real app would be more sophisticated
    if (message.includes('supermercado')) return 'Supermercado';
    if (message.includes('almo√ßo')) return 'Almo√ßo';
    if (message.includes('jantar')) return 'Jantar';
    if (message.includes('combust√≠vel')) return 'Combust√≠vel';
    if (message.includes('uber')) return 'Uber';
    return '';
  };

  return {
    messages,
    isProcessing,
    processUserMessage
  };
}
